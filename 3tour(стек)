#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdlib>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

bool check(string comand) {
	if (comand == "PUSH")
		return true;
	else
		return false;
}

// define default capacity of stack
#define SIZE 100

// Class for stack
template <class K>
class Stack{
private:
	K* arr;
	int top;
	int capacity;

public:
	Stack(int size = SIZE);

	void push(K value);
	K pop();
	K peek();
	int size();
	bool isEmpty();
	bool isFull();

	~Stack() {
		delete[] arr;
	}
};

template <class K>
Stack<K>::Stack(int size)
{
	arr = new K[size];
	capacity = size;
	top = -1;
}

template <class K>
void Stack<K>::push(K value)
{
	if (isFull())
	{
		cout << "OverFlow\nProgram Terminated\n";
		exit(EXIT_FAILURE);
	}

	//cout << "Inserting " << value << endl;
	arr[++top] = value;
}

template <class K>
K Stack<K>::pop()
{
	if (isEmpty())
	{
		cout << "UnderFlow\nProgram Terminated\n";
		exit(EXIT_FAILURE);
	}

	//cout << "Removing " << peek() << endl;

	return arr[top--];
}


template <class K>
K Stack<K>::peek()
{
	if (!isEmpty())
		return arr[top];
	else
		exit(EXIT_FAILURE);
}

template <class K>
int Stack<K>::size()
{
	return top + 1;
}

template <class K>
bool Stack<K>::isEmpty()
{
	return top == -1;// or return size() == 0;
}

template <class K>
bool Stack<K>::isFull()
{
	return top == capacity - 1;// or return size() == capacity;
}

int main()
{
	std::ifstream fin("input.txt");
	std::ofstream fout("output.txt");
	auto& cout = fout;
	string t;
	int N;
	fin >> t >> N;
	
	if (t == "I") {
		Stack<int> pt(N);
		vector<string> comand(N);
		vector<int> val(N);
		int i = 0;
		for (int i = 0; i < N; i++) {
			fin >> comand[i];
			if (check(comand[i])) {
				fin >> val[i];
				pt.push(val[i]);
			}
			else
				pt.pop();
		}
		cout << pt.size() << " ";
		int res = 0;
		while (!pt.isEmpty()) {
			res+=pt.peek();
			pt.pop();
		}
		cout << res;
	}
		
	else {
		Stack<string> pt(N);
		vector<string> comand(N);
		vector<string> val(N);
		for (int i = 0; i < N; i++) {
			fin >> comand[i];
			if (check(comand[i])) {
				fin >> val[i];
				pt.push(val[i]);
			}
			else
				pt.pop();
		}
		cout << pt.size() << " ";
		string res = "";
		while (!pt.isEmpty()) {
			res += pt.peek();
			pt.pop();
		}
		cout << res;
	}
	return 0;
}
